name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main, staging ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: library_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd packages/backend
          npm ci
          cd ../frontend
          npm ci
      
      - name: Generate Prisma client
        run: |
          cd packages/backend
          npx prisma generate
      
      - name: Run backend tests
        run: |
          cd packages/backend
          npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/library_test
          JWT_SECRET: test-secret
      
      - name: Run frontend tests
        run: |
          cd packages/frontend
          npm test
      
      - name: Run e2e tests
        run: |
          cd packages/backend
          npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/library_test
          JWT_SECRET: test-secret
  
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd packages/backend
          npm ci
          cd ../frontend
          npm ci
      
      - name: Lint backend
        run: |
          cd packages/backend
          npm run lint
      
      - name: Lint frontend
        run: |
          cd packages/frontend
          npm run lint
  
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./packages/backend
          push: true
          tags: bahcesehirlibrary/backend:${{ github.ref == 'refs/heads/main' && 'latest' || 'staging' }}
      
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./packages/frontend
          push: true
          tags: bahcesehirlibrary/frontend:${{ github.ref == 'refs/heads/main' && 'latest' || 'staging' }}
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set environment variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          fi
      
      - name: Deploy to AWS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/library-app
            docker-compose pull
            docker-compose down
            export DEPLOY_ENV=${{ env.DEPLOY_ENV }}
            docker-compose up -d
      
      - name: Run database migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /opt/library-app
            docker-compose exec -T backend npx prisma migrate deploy
      
      - name: Notify deployment status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: "Library App deployed to ${{ env.DEPLOY_ENV }} environment"
          SLACK_COLOR: ${{ job.status }}
